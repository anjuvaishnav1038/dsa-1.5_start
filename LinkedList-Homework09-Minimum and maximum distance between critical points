//Minimum and Maximum Distance of Nodes between the critical point--LEETCODE--//
class Solution {
public:
    vector<int> nodesBetweenCriticalPoints(ListNode* head) {
        vector<int>ans={-1,-1};//  minDist,maxDist
        //at least minimum 3 nodes toh honi hi chiye
        ListNode*prev=head;
        if(prev==0)
        return ans;
        ListNode*curr=head->next;
        //agr ekk hi node thi
        if(curr==0)
        return ans;
        ListNode*nxt=head->next->next;
        if(nxt==0)
        return ans;
        int firstCP=-1;
        int lastCP=-1;
        int minimumDistance=INT_MAX;
        int i=1;
        while(nxt!=0){
            bool isCP=((curr->val>prev->val && curr->val>nxt->val) ||
                     (curr->val<prev->val && curr->val<nxt->val))
                     ?true:false;
            if(isCP && firstCP==-1)
            {
                firstCP=i;
                lastCP=i;
            }
            else if(isCP){
                minimumDistance=min(minimumDistance,i-lastCP);
                lastCP=i;
            }
            ++i;
            prev=prev->next;
            curr=curr->next;
            nxt=nxt->next;
        }
     if(lastCP==firstCP){
         //only one CP was found
         return ans;
     }
     else{
         ans[0]=minimumDistance;
         ans[1]=lastCP-firstCP;
     }
     return ans;
    }
};
