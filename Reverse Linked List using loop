
//-----Reverse a linked list---//
#include<iostream>
using namespace std;
class Node{
  public:
  int data;
  Node*next;
  Node(){
    this-> data=0;
    this->next=NULL;
  }
  Node(int data){
    this->data=data;
    this->next=NULL;
  }
  //Homework-Write a destructor to delete a node
  ~Node(){
//write your code here
cout<<"Node with value: "<<this->data<<"deleted"<<endl;
  }
};
void print(Node*&head){
  Node*temp=head;
  while(temp!=NULL){
      cout<<temp->data<<" ";
      temp=temp->next;
  }
}

//I want to insert node at the head of the Linked List
void insertAthead(Node*&head,Node*&tail,int data){
  //check for empty linked list
  if(head==NULL){
   Node *newNode=new Node(data);
   head=newNode;
   tail=newNode;
   return;
  }
  //step1-create new node
  Node*newNode=new Node(data);
  //step 2-newnode ko head sey attach krdo
  newNode->next=head;
  //step3-head hmesha linked lisst ki starting drshata hh
  head=newNode;
}
//I Want to insert the node right at the end of the linked list
void insertAttail(Node*&head,Node*&tail,int data){
   //check for empty linked list
  if(head==NULL){
   Node *newNode=new Node(data);
   head=newNode;
   tail=newNode;
   return;
  }
//step 1:Create a new node
Node*newNode=new Node(data);
//step2:connect with tail node
tail->next=newNode;
//step3:update tail
tail=newNode;
}
int findLength(Node*&head){
  int length=0;
  Node*temp=head;
  while(temp!=NULL){
    temp=temp->next;
    length++;
  }
  return length;
}
void insertAtposition(int data,int position,Node*&head,Node*&tail){
  //if linked list is empty
if(head==NULL){
  Node*newNode=new Node(data);
  head=newNode;
  tail=newNode;
  return;
}
if(position==0){
  insertAthead(head,tail,data);
  return;
}
int length=findLength(head);
cout<<"length is "<<length<<endl;
if(position>=length){
  insertAttail(head,tail,data);
  return;
}
//step1:find the position prev and current
int i=1;
Node*prev=head;
while(i<position){
prev=prev->next;
i++;
}
Node*curr=prev->next;


//step2:
Node*newNode=new Node(data);
//step3:
newNode->next=curr;
//step4
prev->next=newNode;
}
void deleteNode(int position,Node*&head,Node*&tail){
  //agr hmari linked list hi empty hh toh
  if(head==NULL){
    cout<<"canot delete,linked list is empty"<<endl;
    return;
  }
  //phli node delete krni hh toh
  if(position==1){
   Node*temp=head;
   head=head->next;
   temp->next=NULL;
   delete temp;
   return;
  }
  //last node delete krna
int length=findLength(head);
if(position==length){
  //step1: find prev
int i=1;
Node*prev=head;
while(i<position-1){
  prev=prev->next;
  i++;
}
  //step2:
  prev->next=NULL;
  //step3:
  Node*temp=tail;
  //step 4
  tail=prev;
  //step 5
  delete temp;
  return;
}
//delete middle node
//step1:find prev and curr
int i=1;
Node*prev=head;
while(i<position-1){
  prev=prev->next;
  i++;
}
Node*curr=prev->next; 
//step2:
prev->next=curr->next;
//step3:
curr->next=NULL;
//step 4
delete curr;
}
Node* reverse(Node*&prev,Node*&curr){
  //base case
  if(curr==NULL){
    //linked list reverse ho chukki hh
    return prev;
  }
  //ekk case solve krdo bakki recursion smbhal lega
  Node*forward=curr->next;
  curr->next=prev;
  reverse(curr,forward);
}
Node* reverseUsingLoop(Node*&head){
  Node*prev=NULL;
  Node*curr=head;
  while(curr!=NULL){
    //temp bnalo
    Node*temp=curr->next;
    curr->next=prev;
    prev=curr;
    curr=temp;
  }
  return prev;
}
int main(){
  //dyanamic object creation
  // Node *head=new Node(10);
  Node *head=NULL;
  Node*tail=NULL;
  insertAthead(head,tail,20);
  insertAthead(head,tail,50);
  insertAthead(head,tail,60);
  insertAthead(head,tail,90);
  insertAttail(head,tail,75);
   print(head);
   cout<<endl;
//  cout<<"head: "<<head->data<<endl;
//  cout<<"tail: "<<tail->data<<endl;
//   insertAtposition(101,6,head,tail);
//   cout<<"printing after insert at position call"<<endl;
//   print(head);
//   cout<<endl;
//  cout<<"head: "<<head->data<<endl;
//  cout<<"tail: "<<tail->data<<endl;
// deleteNode(5,head,tail);
// print(head);
// cout<<endl;
// Node*prev=NULL;
// Node*curr=head;
// head=reverse (prev,curr);
// cout<<endl;
// print(head);
// cout<<endl;
head=reverseUsingLoop(head);
print(head);

  return 0;
}
