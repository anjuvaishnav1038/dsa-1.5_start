//generate paranthesis using recursion
class Solution {
public:
 void solve(vector<string>&ans,int open,int close,int n,string &output){
     //base case
     if(open==0 && close==0){
         ans.push_back(output);
     return ;
     }
     //include open bracket
     if(open>0)
     {
        output.push_back('(');
         //recursive call
         solve(ans,open-1,close,n,output);
         //backtrack
        output.pop_back();
         }
     //include close bracket
     //means open hh availble
     if(close>open){
         output.push_back(')');
         //recursive call
         solve(ans,open,close-1,n,output);
         //backtrack
         output.pop_back();
     }
 }
    vector<string> generateParenthesis(int n) {
     int open=n;
     int close=n;
     string output="";
     vector<string>ans;
     solve(ans,open,close,n,output);
     return ans;
    }
};
