//-----Buiding Tree Using inoreder and Preorder Traversal--------//
#include<iostream>
#include<queue>
using namespace std;
class Node{
  public:
  int data;
  Node*left;
  Node*right;
  Node(int data){
    this->data=data;
    this->left=NULL;
    this->right=NULL;
  }
};
int findPosition(int arr[],int n ,int element){
  for(int i=0;i<n;i++){
    if(arr[i]==element){
      return i;
    }
  }
  return -1;
}
// build tree from inorder and prerder traversal
Node*BuildTreeInorderPreorder(int inorder[],int preorder[],int size,int &preindex
,int InorderStart,int InorderEnd){
  //base case
if(preindex>=size || InorderStart>InorderEnd){
  return NULL;
}
//Step A:
//elemnt nikal lo
int element=preorder[preindex++];
//phir iss element ka node bnado
Node*root=new Node(element);
//abb iss element ki inorder mey position find krni pdegi
int pos=findPosition(inorder,size,element);
// step B: root->leftko solve krna hh
root->left=BuildTreeInorderPreorder(inorder,preorder,size,preindex,InorderStart,pos-1);
//step c:root->right ko solve krdo
root->right=BuildTreeInorderPreorder(inorder,preorder,size,preindex,pos+1,InorderEnd);
return root;
}
void LevelOrderTraversal(Node*root){
    //intially queue bnalo
    queue<Node*>q;
    q.push(root);
    q.push(NULL);
    while(!q.empty()){
        Node*temp=q.front();
         q.pop();
        if(temp==NULL){
           cout<<endl;
           if(!q.empty()){
               q.push(NULL);
           }
        }
        else{
            //c
        cout<<temp->data<<" ";
          //d
        if(temp->left){
            q.push(temp->left);
        }
        //e
        
        if(temp->right){
           q.push(temp->right);
       }
       
        }
       
    }
}
int main(){
int inorder[]={40,20,50,10,60,30,70};
int preorder[]={10,20,40,50,30,60,70};
int size=7;
int preindex=0;
int InorderStart=0;
int InorderEnd=size-1;
cout<<"Building Tree"<<endl;
Node*root=BuildTreeInorderPreorder(inorder,preorder,size,preindex,InorderStart,InorderEnd);
cout<<"printing LevelOrder Traversal"<<endl;
LevelOrderTraversal(root);

return 0;
}
