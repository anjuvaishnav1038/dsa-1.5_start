//minimum cost for tickets LEETCODE solved using recursion
class Solution {
public:
     int mincostTickets_Helper(vector<int>&days,vector<int>&costs,int i){
         //base case
         // i is traversing on the days array
        if(i>=days.size())
        return 0;
        //solution for one case
         //1 day pass taken
        int cost1=costs[0]+ mincostTickets_Helper(days,costs,i+1);
        //7 Day pass taken
        int passEndDay7=days[i]+7-1;
        int j=i;
        while(j<days.size()&&days[j]<=passEndDay7){
            //j hmey btayega ki hmne 7 day pass mey kitne din travel kr liya hh
            j++;
        }
        int cost7=costs[1]+ mincostTickets_Helper(days,costs,j);
        int passEndday30=days[i]+30-1;
        int k=i;
        while(k<days.size()&&days[k]<=passEndday30){
            //k hmey btayega ki hmne 30 day pass mey kitne din travel kr liya hh
            k++;
        }
        int cost30=costs[2]+mincostTickets_Helper(days,costs,k);
        int cost=min(cost1,min(cost7,cost30));
        return cost; 
     }
    int mincostTickets(vector<int>& days, vector<int>& costs) {
        return mincostTickets_Helper(days,costs,0);
        
    }
};
