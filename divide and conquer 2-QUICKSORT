//QuickSort using Recurrsion
#include<iostream>
using namespace std;
int partition(int *arr,int s,int e){
  //step1:Choose Pivot Element
  int pivotIndex=s;
  int pivotElement=arr[s];
  //step2:find Right position for pivot Element and place it there
  int count=0;
  for(int i=s+1;i<=e;i++){
    if(arr[i]<=pivotElement)
    count++;
  }
  //jbb mey loop sey bhar ayyi toh mere pass pivot ki right position ka index ready hh
  int rightIndex=s+count;
  swap(arr[pivotIndex],arr[rightIndex]);
  pivotIndex=rightIndex;
  //step3:left mey->chote elemnt,right mey->bdey elemnt
  int i=s;
  int j=e;
  while(i<pivotIndex && j>pivotIndex){
    while(arr[i]<=pivotElement){
    i++;}
    while(arr[j]>pivotElement){
    j--;
  }
  //2 case ho skte hh
  //A->found the elemnt to swap
  //B->no need for swapping
  if(i<pivotIndex && j>pivotIndex)
    swap(arr[i],arr[j]);

  }
  return pivotIndex;

}
void QuickSort(int*arr,int s,int e){
//base case
//s==e->single element 
//s>e->invalid array
  if(s>=e)
  return;
  //partition logic-->return PivotIndex
  int p=partition(arr,s,e);
  //recursive call
  //pivot Element ke left mey call krdi
  QuickSort(arr,s,p-1);
  //pivot Element ke right mey call krdi
  QuickSort(arr,p+1,e);
}

int main(){
int arr[]={8,3,4,1,20,50,3,5,4,4,4,4,4,6,7,8,4,3,3};
int n=19;
int s=0;
int e=n-1;
QuickSort(arr,s,e);
for(int i=0;i<n;i++){
  cout<<arr[i]<<" ";
}
cout<<endl;
return 0;
}
