//maximum sub array summ using sivide and conquer technique->LEETCODE
class Solution {
public:
    int maxSubArrayHelper(vector<int>&nums,int start,int end){
        //base case
        if(start==end){
            return nums[start];
        }
        int maxLeftBorderSum=INT_MIN;
        int maxRightBorderSum=INT_MIN;
        int mid=start+((end-start)>>1);
        //recursive call
        int maxLeftSum=maxSubArrayHelper(nums,start,mid);
        int maxRightSum=maxSubArrayHelper(nums,mid+1,end);
        //max cross border Sum
        int leftBorderSum=0;
        int RightBorderSum=0;
        //finding left border sum
        for(int i=mid;i>=start;i--){
            leftBorderSum+=nums[i];
            if(leftBorderSum>maxLeftBorderSum){
                maxLeftBorderSum=leftBorderSum;
            }
        }
        //finding right border sum
         for(int i=mid+1;i<=end;i++){
            RightBorderSum+=nums[i];
            if(RightBorderSum>maxRightBorderSum){
                maxRightBorderSum=RightBorderSum;
            }
        }
        int crossBorderSum=maxRightBorderSum+maxLeftBorderSum;
      return max(maxLeftSum,max(maxRightSum,crossBorderSum));
    }
    int maxSubArray(vector<int>& nums) {
        return maxSubArrayHelper(nums,0,nums.size()-1);
    }
};
