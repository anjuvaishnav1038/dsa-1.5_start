//---Finding middle of the linked list using two pointer approach---//
#include<iostream>
using namespace std;
class Node{
  public:
int data;
Node*next;
Node(){
  this->data=data;
  this->next=NULL;
}
Node(int data){
  this->data=data;
  this->next=NULL;
}
};
void print(Node*&head){
  Node*temp=head;
  while(temp!=NULL){
    cout<<temp->data<<" ";
    temp=temp->next;
  }
}
Node*getMiddle(Node*head){
  //agr linked list hi empty hh toh
  if(head==NULL){
  cout<<"Linked List is empty"<<endl;
  return head;}
  //agr ek hi node pdi hui hh toh
  if(head->next==NULL){
  //toh yhi middle hogi 
  return head;
  }
  //linkedList have greater than one node;
  Node*slow=head;
  Node*fast=head;
  while(slow!=NULL && fast!=NULL){
    fast=fast->next;
    if(fast!=NULL){
      fast=fast->next;
      slow=slow->next;
    }

  }
  return slow;
}
int main(){
Node*first=new Node(10);
Node*second=new Node(20);
Node*third=new Node(30);
Node*fourth=new Node(40);
// Node*fifth=new Node(50);
Node*head=first;
Node*tail=fourth;
first->next=second;
second->next=third;
third->next=fourth;
// fourth->next=fifth;
fourth->next=NULL;
print(head);
cout<<endl;
cout<<"middle node is "<<getMiddle(head)->data;
return 0;

}
