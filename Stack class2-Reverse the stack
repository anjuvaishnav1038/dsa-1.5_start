//------Reverse Stack ------//
#include<iostream>
#include<stack>
using namespace std;
void insertAtBottom(stack<int>&s,int target){
  //base case 
  if(s.empty()){
    s.push(target);
    return;
  }
  //ekk case solve krdo
 int topElement=s.top();
  s.pop();
  //recursive call
  insertAtBottom(s,target);
  //backtrack
  s.push(topElement);
}
void reverseStack(stack<int>&s){
  //base case
 if(s.empty()){
  return;
 }
  //ekk case solve krdo
  int target=s.top();
  s.pop();
  //iss target ko insert at bottom krenge prr kbb krenge jbb stack empty ho chukla hoga
  //reverse stack
  reverseStack(s);
  //insert at bottom target ko
  insertAtBottom(s,target);
}
int main(){
stack<int>s;
s.push(10);
s.push(20);
s.push(30);
s.push(40);
s.push(50);
reverseStack(s);
cout<<"Printing the stack after reverse"<<endl;
while(!s.empty()){
  cout<<s.top()<<" ";
  s.pop();
}
cout<<endl;
  return 0;
}
