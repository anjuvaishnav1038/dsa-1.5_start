// mergesort using recursion
#include<iostream>
using namespace std;
void merge(int *arr,int s,int e){
  int mid=(s+e)/2;
  int len1=mid-s+1;
  int len2=e-mid;
  //arr[n]-->bad practice
  //so create array dyanimically for length len1 and len2
  int*left=new int[len1];
  int*right=new int[len2];
  //copy values
  int k=s;
  for(int i=0;i<len1;i++){
    left[i]=arr[k];
    k++;
  }
  k=mid+1;
  for(int i=0;i<len2;i++){
    right[i]=arr[k];
    k++;
  }
  //merge logic
  int leftIndex=0;
  int rightIndex=0;
  int mainArrayIndex=s;
  while(leftIndex<len1 && rightIndex<len2){
    if(left[leftIndex]<right[rightIndex]){
      arr[mainArrayIndex++]=left[leftIndex++];
      // mainArrayIndex++;
      // leftIndex++;
    }
    else{
      arr[mainArrayIndex++]=right[rightIndex++];
      // mainArrayIndex++;
      // rightIndex++;
    }}
    //copy logic of left array
    while(leftIndex<len1){
      arr[mainArrayIndex++]=left[leftIndex++];
    }
    //copy logic for right Array
    while(rightIndex<len2){
       arr[mainArrayIndex++]=right[rightIndex++];
    }
    //delete left and right wala newly created array

  }
//As array is always pass by reference *arr=&arr[]
void mergeSort(int *arr,int s,int e){
  //base case
  //s==e-->single element
  //s>e-->invalid array
  if(s>=e)
  return ;
  int mid=(s+e)/2;
  //left part sort krdo recursion Bhaiya
  mergeSort(arr,s,mid);
  //right part sort krdo recursion bhaiya
  mergeSort(arr,mid+1,e);
  //now merge these 2 sorted arrays
  merge(arr,s,e);


}
int main(){
  int arr[]={4,40,2,90,1,2,2,2};
  int n=8;
  int s=0;
  int e=n-1;
  //calling merge sort function
  mergeSort(arr,s,e);
  for(int i=0;i<n;i++){
    cout<<arr[i]<<" ";
  }
  cout<<endl;
  return 0;
}
