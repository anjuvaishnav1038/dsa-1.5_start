//---SHALLOW VS DEEP COPY---//
#include<iostream>
using namespace std;
class abc{
    public:
    int x;
    int *y;
    //intialization list
    abc(int _x,int _y):x(_x),y(new int(_y)){}
    //default dumb constructor-->it does shallow copy
    // abc(const abc& obj){
    //     x=obj.x;
    //     y=obj.y;
    // }
    //---OUR SMART DEEP COPY--//
    abc(const abc& obj){
        x=obj.x;
        y=new int(*obj.y);//iska mtlb hh a key y ki value uthaayi or nyi location bnayi phir wo b key y ko deydi
    }
    void print() const{
   printf("X:%d\nPTR Y:%p\nContent of y(*y):%d\n\n",x,y,*y);
    }
    //destructor call
    ~abc(){
        delete y;
    }
};
int main(){
//     abc a(1,2);
//     cout<<"Printing a"<<endl;
//     a.print();
//     //abc b(a);
//     abc b=a;//call hota hh copy constructor
//     cout<<"Printing b"<<endl;
//     b.print();
//     *b.y=20;
//   cout<<"Printing b"<<endl;
//     b.print();
//   cout<<"Printing a"<<endl;
//   a.print();
abc *a=new abc(1,2);
abc b=*a;
delete a;
b.print();
    return 0;
}
