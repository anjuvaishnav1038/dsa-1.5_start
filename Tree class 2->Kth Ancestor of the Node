#include<iostream>
using namespace std;
class Node{
  public:
  int data;
  Node*left;
  Node*right;
  Node(int data){
    this->data=data;
    this->left=NULL;
    this->right=NULL;
  }
};
Node*BuildTree(){
  int data;
  cout<<"Enter data";
  cin>>data;
  if(data==-1){
    return NULL;
  }
  Node*root=new Node(data);
  //left ki call mar do
  cout<<"Enter data for the root left Node"<<data<<endl;
  root->left=BuildTree();
  //right ki call mar do
  cout<<"Enter data for the root right Node"<<data<<endl;
  root->right=BuildTree();
 return root;
}
bool KthAncestor(Node*root,int &k,int  p){
  if(root==NULL){
    return false;
  }
  if(root->data==p){
    return true;
  }
  //left mey p check kro
  bool leftAns=KthAncestor(root->left,k,p);
  bool rightAns=KthAncestor(root->right,k,p);
  if(leftAns==true || rightAns==true){
    k--;
  }
  if(k==0){
    cout<<"Answer"<<root->data;
    k=-1;
  }
  return leftAns||rightAns;
}
int main(){
Node*root=NULL;
root=BuildTree();
int k=1;
int p=4;
bool found=KthAncestor(root,k,p);

}
