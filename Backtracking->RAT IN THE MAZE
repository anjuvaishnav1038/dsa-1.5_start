//Rat in maze using backtrackking
#include <iostream>
#include<vector>
#include<string>
using namespace std;
bool isSafe(int i,int j,int row,int col,int arr[][4],vector<vector<bool>>&visited){
  //condition1:All cordinates must lie inside the array
  //condition2:hmari array key ander uss cell prr 1 pda hona chiye
  //condition3:visitied of that place should be false 
  if(((i>=0 && i<row)&&(j>=0 && j<col))&&
   (arr[i][j]==1) &&
   (visited[i][j]==false)){
    return true;
  }
  else 
  return false;
}
void solveMaze(int arr[][4],int row,int col,int i,int j,vector<vector<bool>>&visited,vector<string>&path,string output){
//base case
//hmm destination phauch gye
if(i==row-1 && j==col-1){
  //ans found
  path.push_back(output);
  return;
}
//Down-->(i+1,j)
if(isSafe(i+1,j,row,col,arr,visited)){
  visited[i+1][j]=true;
  solveMaze(arr,row,col,i+1,j,visited,path,output+'D');
  //Backtrack
  visited[i+1][j]=false;
}
//left-->(i,j-1)
if(isSafe(i,j-1,row,col,arr,visited)){
visited[i][j-1]=true;
solveMaze(arr,row,col,i,j-1,visited,path,output+'L');
//backtrack
visited[i][j-1]=false;
}
//right-->(i,j+1)
if(isSafe(i,j+1,row,col,arr,visited)){
visited[i][j+1]=true;
solveMaze(arr,row,col,i,j+1,visited,path,output+'R');
//Bactrack
visited[i][j+1]=false;
}
//up-->(i-1,j)
if(isSafe(i-1,j,row,col,arr,visited)){
  visited[i-1][j]=true;
  solveMaze(arr,row,col,i-1,j,visited,path,output+'U');
  //backtrack
  visited[i-1][j]=false;
}
}
int main() {
  // {{1,0,0}
  // ,{1,1,0}
  // ,{1,1,1}};
int maze[4][4]={{1,0,0,0}
              , {1,1,1,0}
              , {0,1,1,0}
              , {0,1,1,1}};
if(maze[0][0]==0)
{
  cout<<"No Path exists"<<endl;
  return 0;
}
int row=4;
int col=4;
 vector<vector<bool> > visited(row, vector<bool>(col,false));
//source ki value true mark krdete hh
visited[0][0]=true;
vector<string>path;
string output="";
solveMaze(maze,row,col,0,0,visited,path,output);
cout<<"Printing the Results"<<endl;
for(auto i:path){
  cout<<i<<" ";
}
cout<<endl;
//when destination doesn't exist
if(path.size()==0){
  cout<<"NO path Exists"<<endl;
}
  return 0;
}
